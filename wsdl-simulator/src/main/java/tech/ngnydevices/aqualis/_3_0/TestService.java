package tech.ngnydevices.aqualis._3_0;

import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Paths;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-07-17T00:07:21.480+02:00
 * Generated source version: 3.2.4
 *
 */
@WebServiceClient(name = "TestService",
        wsdlLocation = CONF.LOCATION,
                  targetNamespace = "http://www.ngnydevices.tech/aqualis/3-0")
public class TestService extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.ngnydevices.tech/aqualis/3-0", "TestService");
    public final static QName TestServicePort = new QName("http://www.ngnydevices.tech/aqualis/3-0", "TestServicePort");
    public final static QName HomingPort = new QName("http://www.ngnydevices.tech/aqualis/3-0", "HomingPort");
    public final static QName TestBulkUploadPort = new QName("http://www.ngnydevices.tech/aqualis/3-0", "TestBulkUploadPort");
    public final static QName ResultServicePort = new QName("http://www.ngnydevices.tech/aqualis/3-0", "ResultServicePort");
    static {
        URL url =  ClassLoader.getSystemClassLoader().getResource(CONF.LOCATION);

        WSDL_LOCATION = url;
    }

    public TestService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TestService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TestService() {
        super(WSDL_LOCATION, SERVICE);
    }

    public TestService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public TestService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TestService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServicePort")
    public TestServicePortType getTestServicePort() {
        return super.getPort(TestServicePort, TestServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestServicePortType
     */
    @WebEndpoint(name = "TestServicePort")
    public TestServicePortType getTestServicePort(WebServiceFeature... features) {
        return super.getPort(TestServicePort, TestServicePortType.class, features);
    }


    /**
     *
     * @return
     *     returns HomingPortType
     */
    @WebEndpoint(name = "HomingPort")
    public HomingPortType getHomingPort() {
        return super.getPort(HomingPort, HomingPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns HomingPortType
     */
    @WebEndpoint(name = "HomingPort")
    public HomingPortType getHomingPort(WebServiceFeature... features) {
        return super.getPort(HomingPort, HomingPortType.class, features);
    }


    /**
     *
     * @return
     *     returns TestBulkUploadPortType
     */
    @WebEndpoint(name = "TestBulkUploadPort")
    public TestBulkUploadPortType getTestBulkUploadPort() {
        return super.getPort(TestBulkUploadPort, TestBulkUploadPortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TestBulkUploadPortType
     */
    @WebEndpoint(name = "TestBulkUploadPort")
    public TestBulkUploadPortType getTestBulkUploadPort(WebServiceFeature... features) {
        return super.getPort(TestBulkUploadPort, TestBulkUploadPortType.class, features);
    }


    /**
     *
     * @return
     *     returns ResultServicePortType
     */
    @WebEndpoint(name = "ResultServicePort")
    public ResultServicePortType getResultServicePort() {
        return super.getPort(ResultServicePort, ResultServicePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns ResultServicePortType
     */
    @WebEndpoint(name = "ResultServicePort")
    public ResultServicePortType getResultServicePort(WebServiceFeature... features) {
        return super.getPort(ResultServicePort, ResultServicePortType.class, features);
    }

}
